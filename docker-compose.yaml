version: '3'

x-airflow-common:
# default docker-compose: https://github.com/apache/airflow/blob/main/docs/apache-airflow/start/docker-compose.yaml
  &airflow-common
  build:
      context: ./dockerfiles
      dockerfile: Dockerfile_airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@172.20.0.2/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@172.20.0.2/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@172.20.0.3:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/Sao Paulo'
    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'America/Sao Paulo'
#   It doesn't work when creating containers. still need to check
#    AIRFLOW__LOGGING__REMOTE_LOGGING: 'True'
#    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: 'minio_connection'
#    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: 'logs'
#    AIRFLOW_CONN_LOGS_S3=s3://id:secret_uri_encoded@S3		
#    AIRFLOW__CORE__REMOTE_LOG_CONN_ID: 'INFO'	
#    AIRFLOW__CORE__ENCRYPT_S3_LOGS: 'False'
#    AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark:7077'
#    AIRFLOW_CONN_MINIO_DEFAULT: 's3://minio:minio123@minio:9000'
#    AIRFLOW_CONN_CASSANDRA_DEFAULT: 'cassandra://cassandra:cassandra@cassandra:9042'    
    ADDITIONAL_AIRFLOW_EXTRAS: apache.spark
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- ipython==7.31.1 ipykernel==6.9.1 apache-airflow-providers-papermill==2.2.0 pyspark==3.2.0 apache-airflow-providers-apache-spark==2.1.0 apache-airflow-providers-apache-cassandra==2.1.0 } #Adding the Spark provider in Airflow	
  volumes:
    - ./storage/bucket/jupyter-notebooks:/usr/local/spark/notebooks
    - ./storage/bucket/airflow-dags:/opt/airflow/dags
    - ./storage/bucket/spark-apps:/usr/local/spark/app
    - ./storage/bucket/data:/usr/local/spark/data
    - ./storage/bucket/logs/airflow:/opt/airflow/logs 
    # finish configuration airflow in dags
    - ./config/airflow/configure.sh:/usr/local/spark/configure.sh
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"

  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy    
  networks:
    datalake_network:
      ipv4_address: 172.20.0.7

services:

  postgres:
    image: postgres:13
    container_name: datalake_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      datalake_network:
        ipv4_address: 172.20.0.2

  redis:
    image: redis:latest
    container_name: datalake_redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      datalake_network:
        ipv4_address: 172.20.0.3

  airflow-webserver:
    <<: *airflow-common
    container_name: datalake_airflow
    command: webserver
    ports:
      - '8282:8080'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully    
    networks:
      datalake_network:
        ipv4_address: 172.20.0.4

  airflow-scheduler:
    <<: *airflow-common
    container_name: datalake_scheduler
    command: scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully    
    networks:
      datalake_network:
        ipv4_address: 172.20.0.5

  airflow-worker:
    <<: *airflow-common
    container_name: datalake_airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"          
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully    
    networks:
      datalake_network:
        ipv4_address: 172.20.0.6

  airflow-init:
    <<: *airflow-common
    container_name: datalake_init    
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    container_name: datalake_flower
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully    
    networks:
      datalake_network:
        ipv4_address: 172.20.0.8

  spark:
#    image: bitnami/spark:3.2.0
    build: 
      context: ./dockerfiles
      dockerfile: Dockerfile_spark
    container_name: datalake_spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
    volumes:
      - ./storage/bucket/jupyter-notebooks:/usr/local/spark/notebooks    
      - ./storage/bucket/spark-apps:/usr/local/spark/app
      - ./storage/bucket/data:/usr/local/spark/data
    networks:
      datalake_network:
        ipv4_address: 172.20.0.9

  spark-worker:
    image: bitnami/spark:3.2.0
    build: 
      context: ./dockerfiles
      dockerfile: Dockerfile_spark
    container_name: datalake_spark-worker
    environment:     
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=10G
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
    - '8081:8081'
    volumes:
      - ./storage/bucket/jupyter-notebooks:/usr/local/spark/notebooks        
      - ./storage/bucket/spark-apps:/usr/local/spark/app
      - ./storage/bucket/data:/usr/local/spark/data
    networks:
      datalake_network:
        ipv4_address: 172.20.0.10

  cassandra:    
    image: bitnami/cassandra:3.11.6
    container_name: datalake_cassandra
    ports:
      - "7005:7000"
      - "9042:9042"
#    volumes:
#      - ./cassandra_data:/bitnami/cassandra/data/data/
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
        - CASSANDRA_USER=cassandra
        - CASSANDRA_PASSWORD=cassandra
        - CASSANDRA_PASSWORD_SEEDER=yes
        - CASSANDRA_SEEDS=cassandra
    networks:
      datalake_network:
        ipv4_address: 172.20.0.11

  cassandra_web:
    image: delermando/docker-cassandra-web:v0.4.0
    container_name: datalake_cassandra-web
    ports:
      - "3000:3000"
    environment:
        - CASSANDRA_HOST_IP=172.20.0.11
        - CASSANDRA_PORT=9042
        - CASSANDRA_USER=cassandra
        - CASSANDRA_PASSWORD=cassandra
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      datalake_network:
        ipv4_address: 172.20.0.12

  jupyterlab:
    build: 
      context: ./dockerfiles
      dockerfile: Dockerfile_jupyterlab
    container_name: datalake_jupyterlab
    ports:
      - 8888:8888
    volumes:
      - ./storage/bucket/jupyter-notebooks:/home/jovyan/work
      - ./storage/bucket/data:/usr/local/spark/data
      - ./:/workspace
      - ./storage/jupyter-runtime:/home/jovyan/.local/share/jupyter/runtime
    networks:
      datalake_network:
        ipv4_address: 172.20.0.13
    command: "start-notebook.sh --NotebookApp.token='datalake' --NotebookApp.password='datalake'"

  minio:
    image: minio/minio
    container_name: datalake_minio    
    ports:
      - "9000:9000"
    volumes:
      - ./storage/bucket:/data
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/"]
      interval: 10s
      timeout: 10s
      retries: 5      
    networks:
      datalake_network:
        ipv4_address: 172.20.0.14      
    environment:
      - "MINIO_ACCESS_KEY=minio"
      - "MINIO_SECRET_KEY=minio123"
    command: server /data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: datalake_zookeeper    
    ports:
      - '2181:2181'
      - '8085:8080'    
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_ADMINSERVER_ENABLED: "true"
    networks:
      datalake_network:
        ipv4_address: 172.20.0.16
  
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: datalake_kafka    
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      datalake_network:
        ipv4_address: 172.20.0.17
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_web:
    image: elkozmon/zoonavigator:1.1.1
    container_name: datalake_kafka_web
    depends_on:
      - zookeeper
    ports:
      - 9093:9000      
    networks:
      datalake_network:
        ipv4_address: 172.20.0.18
    environment:
      HTTP_PORT: 9000      

# Tests for the automatic creation of bucks in minio
# migration minio
#  createbuckets:
#    image: minio/mc
#    container_name: datalake_miniomc    
#    depends_on:
#      minio:
#        condition: service_healthy
#    restart: always      
#    entrypoint: >
#      /bin/sh -c "
#      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
#      /usr/bin/mc mb myminio/logs;
#      /usr/bin/mc policy set public myminio/logs;
#      exit 0;
#      "

# Needed to sync github with airflow dags. Being tested with Elyra integration
#  gitsync:
#   image: openweb/git-sync
#    container_name: datalake_gitsync
#    depends_on:
#      minio:
#        condition: service_healthy
#   volumes:
#      - ./storage/dags:/git:z                
#    restart: always
#    networks:
#      datalake_network:
#        ipv4_address: 172.20.0.15
#    environment:
#      - GIT_SYNC_REPO=https://github.com/michelmourasilva/airflowdags.git
#      - GIT_SYNC_DEST=/git
#      - GIT_SYNC_BRANCH=master
#      - GIT_SYNC_ONE_TIME=false
#      - GIT_SYNC_WAIT=10
#      - GIT_KNOWN_HOSTS="false"
#      - GIT_SYNC_USERNAME=michelmourasilva@gmail.com
#      - GIT_PASSWORD=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

volumes:
  postgres-db-volume:
#  cassandra_data:
#    driver: local

networks:
  datalake_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
